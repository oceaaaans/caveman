# -*- coding: utf-8 -*-
"""
Created on Sun Nov  3 07:34:11 2024

@author: ariel
"""
# part 1 - draft algorithmic solution
# Algorithm Overview:
    
# 1. Identify all inputs: System information (e.g., Computer Name, IP, MAC, etc.)
# 2. Identify all outputs: CSV file containing collected data.
# 3. Ensure the process terminates after data collection and saving.
# 4. Account for all scenarios, including successful data retrieval and error handling.
# 5. Eliminate redundant steps, maintaining a streamlined flow.
# 6. Write in a way that is independent of programming language, using clear logic.
# 7. Utilise efficient control structures, such as loops and conditional statements.


# Part 2 - Developing algorithmic solution:
# BEGIN Automated Process

#        INPUTS
#     DEFINE computerName
#     DEFINE ipAddress
#     DEFINE macAddress
#     DEFINE processorModel
#     DEFINE operatingSystem
#     DEFINE systemTime
#     DEFINE internetSpeed
#     DEFINE activePorts
#     DEFINE csvFileName

#        INITIALIZE CSV File
#     IF NOT csvFileExists(csvFileName) THEN
#         CREATE csvFileName with headers

#        COLLECT SYSTEM INFORMATION
#     computerName = GetComputerName()
#     ipAddress = GetIPAddress()
#     macAddress = GetMacAddress()
#     processorModel = GetProcessorInfo()
#     operatingSystem = GetOSInfo()
#     systemTime = GetSystemTime()
#     internetSpeed = GetInternetSpeed()
#     activePorts = GetActivePorts()

#        WRITE DATA TO CSV
#     APPEND data to csvFileName
#     IF errorOccurred THEN
#         DISPLAY error message

#        TERMINATE PROCESS
#     END Automated Process


# import libraries and modules, if cannot be imported, install them.
import csv
import socket
import platform
import os
import subprocess
from datetime import datetime
import urllib.request
import psutil  # A built-in library for cross-platform access to system details


# Collects IP address using DNS resolution
def getIpAddress():
    try:
        hostName = socket.gethostname()
        ipAddress = socket.gethostbyname(hostName)
        return ipAddress
    except Exception as e:
        return f"Error: {e}"


# Collects MAC address using built-in system commands
import re

def getMacAddress():
    try:
        if platform.system() == "Windows":
            result = subprocess.check_output("getmac", shell=True, text=True).splitlines()
            for line in result:
                if 'Physical' not in line and '-' in line:
                    mac_address = line.split()[0]
                    if len(mac_address) == 17:  # Valid MAC address length
                        return mac_address
        else:
            result = subprocess.check_output("ip link", shell=True, text=True)
            match = re.search(r"link/ether ([0-9a-fA-F:]{17})", result)
            if match:
                return match.group(1)
    except Exception as e:
        return f"Error: {e}"

    return "MAC address not found"


# Retrieves processor information using system tools more reliable across systems
# windows use wmic output while linux uses lscpu
def getProcessorInfo():
    try:
        if platform.system() == "Windows":
            command = "wmic cpu get name"
            result = subprocess.check_output(command, shell=True, text=True).splitlines()
            result = [line.strip() for line in result if line.strip()]
            return result[1] if len(result) > 1 else "N/A"
        elif platform.system() == "Linux":
            try:
                command = "lscpu | grep 'Model name' | awk -F: '{print $2}'"
                result = subprocess.check_output(command, shell=True, text=True).strip()
                if result:
                    return result.strip()
            except subprocess.CalledProcessError:
                command = "cat /proc/cpuinfo | grep 'model name' | uniq | awk -F: '{print $2}'"
                result = subprocess.check_output(command, shell=True, text=True).strip()
                return result.strip() if result else "N/A"
    except Exception as e:
        return f"Error: {e}"

    return "Processor model not found"

# Collects OS information
def getOsInfo():
    return f"{platform.system()} {platform.release()}"

# Collects system time in a readable format
def getSystemTime():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# Retrieves active ports using built-in tools -in this part is an experiment for getting active ports
# def getActivePorts():
#     activePorts = []
#     try:
#         if platform.system() == "Windows":
#             command = "netstat -an"
#         else:
#             command = "ss -tuln"
#         result = subprocess.check_output(command, shell=True, text=True)
#         for line in result.splitlines():
#             if "LISTEN" in line or "ESTABLISHED" in line:
#                 parts = line.split()
#                 if ':' in parts[-2]:
#                     port = parts[-2].split(':')[-1]
#                     activePorts.append(port)
#     except Exception as e:
#         activePorts.append(f"Error: {e}")
        
#     return activePorts

def getActivePorts():
    active_ports = []
    connections = psutil.net_connections(kind='tcp')  # Fetch TCP connections
    for conn in connections:
        if conn.status == 'LISTEN':
            active_ports.append(conn.laddr.port)
    return active_ports


# Measures internet speed by checking connection response time
def getInternetSpeed():
    try:
        url = "http://google.com"
        startTime = datetime.now()
        urllib.request.urlopen(url, timeout=5)
        endTime = datetime.now()
        duration = (endTime - startTime).total_seconds()
        speedMbps = (1 / duration) * 8  # Approximate speed in Mbps for a 1MB request
        return f"{speedMbps:.2f} Mbps"
    except Exception:
        return "An error occurred"

# The code below with 'exception as e' is giving error on spyder.

    # except Exception as e:
    #     return "Internet not reachable or error occurred"
# had to delete e - it works



# Collects computer information from the current system
def collectComputerInfo():
    computerName = socket.gethostname()
    ipAddress = getIpAddress()
    macAddress = getMacAddress()
    processorModel = getProcessorInfo()
    osInfo = getOsInfo()
    systemTime = getSystemTime()
    internetSpeed = getInternetSpeed()
    activePorts = getActivePorts()

    return {
        "Computer Name": computerName,
        "IP-address": ipAddress,
        "MAC-address": macAddress,
        "Processor Model": processorModel,
        "Operation System": osInfo,
        "System Time": systemTime,
        "Internet Connection Speed": internetSpeed,
        "Active Ports": activePorts}

# Writes or updates CSV with collected information
def writeToCsv(computerInfo, filename="computer data_collection.csv"):
    fileExists = os.path.isfile(filename)
    updated = False

    if fileExists:
        with open(filename, mode='r', newline='') as file:
            reader = csv.DictReader(file)
            existingEntries = [row for row in reader]

    for entry in existingEntries if fileExists else []:
        if entry["Computer Name"] == computerInfo["Computer Name"] and entry["MAC-address"] == computerInfo["MAC-address"]:
            if entry != computerInfo:
                print("Warning: Existing entry differs from current file.")
                entry.update(computerInfo)
                updated = True
                break

    with open(filename, mode='w' if updated else 'a', newline='') as file:
        writer = csv.writer(file)
        
        if not fileExists:
            writer.writerow(["Computer Name", "IP-address", "MAC-address", "Processor Model",
                             "Operation System", "System Time", "Internet Connection Speed", "Active Port"]) #write headers

        for port in computerInfo["Active Ports"]:
            writer.writerow([
                computerInfo["Computer Name"],
                computerInfo["IP-address"],
                computerInfo["MAC-address"],
                computerInfo["Processor Model"],
                computerInfo["Operation System"],
                computerInfo["System Time"],
                computerInfo["Internet Connection Speed"],port]) #append data
              
#   It gives a warning "Warning: Existing entry differs from current file." when there is another csv file of the same name, it was saved
#   succesfully but then when you open that file, the headers are not there.
#   Solution would be:  delete the file and run the code again, it will run as successful.
if __name__ == "__main__":
    info = collectComputerInfo()
    writeToCsv(info)
    print("Computer information collected and saved to CSV.")
