# -*- coding: utf-8 -*-
"""
Created on Sun Nov  3 07:34:11 2024

@author: ariel
"""

import csv
import socket
import platform
import os
import subprocess
from datetime import datetime
import urllib.request

# Collects IP address using DNS resolution
def getIpAddress():
    try:
        hostName = socket.gethostname()
        ipAddress = socket.gethostbyname(hostName)
        return ipAddress
    except Exception as e:
        return f"Error: {e}"

# Collects MAC address using built-in system commands
import re

def getMacAddress():
    try:
        if platform.system() == "Windows":
            result = subprocess.check_output("getmac", shell=True, text=True).splitlines()
            for line in result:
                if 'Physical' not in line and '-' in line:
                    mac_address = line.split()[0]
                    if len(mac_address) == 17:  # Valid MAC address length
                        return mac_address
        else:
            result = subprocess.check_output("ip link", shell=True, text=True)
            match = re.search(r"link/ether ([0-9a-fA-F:]{17})", result)
            if match:
                return match.group(1)
    except Exception as e:
        return f"Error: {e}"

    return "MAC address not found"

# Retrieves processor information using system tools
def getProcessorInfo():
    try:
        if platform.system() == "Windows":
            command = "wmic cpu get name"
            result = subprocess.check_output(command, shell=True, text=True).splitlines()
            result = [line.strip() for line in result if line.strip()]
            return result[1] if len(result) > 1 else "N/A"
        elif platform.system() == "Linux":
            try:
                command = "lscpu | grep 'Model name' | awk -F: '{print $2}'"
                result = subprocess.check_output(command, shell=True, text=True).strip()
                if result:
                    return result.strip()
            except subprocess.CalledProcessError:
                command = "cat /proc/cpuinfo | grep 'model name' | uniq | awk -F: '{print $2}'"
                result = subprocess.check_output(command, shell=True, text=True).strip()
                return result.strip() if result else "N/A"
    except Exception as e:
        return f"Error: {e}"

    return "Processor model not found"

# Collects OS information
def getOsInfo():
    return f"{platform.system()} {platform.release()}"

# Collects system time in a readable format
def getSystemTime():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# Retrieves active ports using built-in tools
def getActivePorts():
    activePorts = []
    try:
        if platform.system() == "Windows":
            command = "netstat -an"
        else:
            command = "ss -tuln"
        result = subprocess.check_output(command, shell=True, text=True)
        for line in result.splitlines():
            if "LISTEN" in line or "ESTABLISHED" in line:
                parts = line.split()
                if ':' in parts[-2]:
                    port = parts[-2].split(':')[-1]
                    activePorts.append(port)
    except Exception as e:
        activePorts.append(f"Error: {e}")
        
    return activePorts

# Measures internet speed by checking connection response time
def getInternetSpeed():
    try:
        url = "http://google.com"
        startTime = datetime.now()
        urllib.request.urlopen(url, timeout=5)
        endTime = datetime.now()
        duration = (endTime - startTime).total_seconds()
        speedMbps = (1 / duration) * 8  # Approximate speed in Mbps for a 1MB request
        return f"{speedMbps:.2f} Mbps"
    except Exception:
        return "An error occurred"

# code below with exception as e is giving error on spyder
    # except Exception as e:
    #     return "Internet not reachable or error occurred"

# Collects information from the current system
def collectComputerInfo():
    computerName = socket.gethostname()
    ipAddress = getIpAddress()
    macAddress = getMacAddress()
    processorModel = getProcessorInfo()
    osInfo = getOsInfo()
    systemTime = getSystemTime()
    internetSpeed = getInternetSpeed()
    activePorts = getActivePorts()

    return {
        "Computer Name": computerName,
        "IP-address": ipAddress,
        "MAC-address": macAddress,
        "Processor Model": processorModel,
        "Operation System": osInfo,
        "System Time": systemTime,
        "Internet Connection Speed": internetSpeed,
        "Active Ports": activePorts
    }

# Writes or updates CSV with collected information
def writeToCsv(computerInfo, filename="computer data_collection.csv"):
    fileExists = os.path.isfile(filename)
    updated = False

    if fileExists:
        with open(filename, mode='r', newline='') as file:
            reader = csv.DictReader(file)
            existingEntries = [row for row in reader]

    for entry in existingEntries if fileExists else []:
        if entry["Computer Name"] == computerInfo["Computer Name"] and entry["MAC-address"] == computerInfo["MAC-address"]:
            if entry != computerInfo:
                print("Warning: Existing entry differs from current data.")
                entry.update(computerInfo)
                updated = True
                break

    with open(filename, mode='w' if updated else 'a', newline='') as file:
        writer = csv.writer(file)
        
        if not fileExists:
            writer.writerow(["Computer Name", "IP-address", "MAC-address", "Processor Model",
                             "Operation System", "System Time", "Internet Connection Speed", "Active Port"])

        for port in computerInfo["Active Ports"]:
            writer.writerow([
                computerInfo["Computer Name"],
                computerInfo["IP-address"],
                computerInfo["MAC-address"],
                computerInfo["Processor Model"],
                computerInfo["Operation System"],
                computerInfo["System Time"],
                computerInfo["Internet Connection Speed"],
                port
            ])

if __name__ == "__main__":
    info = collectComputerInfo()
    writeToCsv(info)
    print("Computer information collected and saved to CSV.")
